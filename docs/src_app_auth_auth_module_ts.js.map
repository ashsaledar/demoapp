{"version":3,"file":"src_app_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"sourcesContent":["import { AuthEffects } from './state/auth.effects';\nimport { EffectsModule } from '@ngrx/effects';\nimport { LoginComponent } from './login/login.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SignupComponent } from './signup/signup.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      { path: '', redirectTo: 'login' },\n      { path: 'login', component: LoginComponent },\n      { path: 'signup', component: SignupComponent },\n    ],\n  },\n];\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    EffectsModule.forFeature(),\n    RouterModule.forChild(routes),\n  ],\n})\nexport class AuthModule {}\n","import { setLoadingSpinner } from './../../store/Shared/shared.actions';\nimport { loginStart } from './../state/auth.actions';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required]),\n    });\n  }\n  onLoginSubmit() {\n    const email = this.loginForm.value.email;\n    const password = this.loginForm.value.password;\n    this.store.dispatch(setLoadingSpinner({ status: true }));\n    this.store.dispatch(loginStart({ email, password }));\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-6 offset-md-3\">\n    <h3>Login</h3>\n    <hr />\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLoginSubmit()\">\n      <div class=\"mb-3\">\n        <label>Email</label>\n        <input type=\"text\" class=\"form-control\" formControlName=\"email\" />\n        <div\n          *ngIf=\"\n            loginForm.get('email').touched && !loginForm.get('email').valid\n          \"\n        >\n          <div *ngIf=\"loginForm.get('email').errors.required\">\n            Email is required\n          </div>\n          <div *ngIf=\"loginForm.get('email').errors.email\">Invalid Email</div>\n        </div>\n      </div>\n      <div class=\"mb-3\">\n        <label>Password</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          formControlName=\"password\"\n        />\n        <div\n          *ngIf=\"\n            loginForm.get('password').touched &&\n            !loginForm.get('password').valid\n          \"\n        >\n          <div>Password is required</div>\n        </div>\n      </div>\n\n      <div class=\"mb-3\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"!loginForm.valid\"\n        >\n          Login\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { signupStart } from './../state/auth.actions';\nimport { setLoadingSpinner } from './../../store/Shared/shared.actions';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store/app.state';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css'],\n})\nexport class SignupComponent implements OnInit {\n  signUpForm: FormGroup;\n\n  constructor(private store: Store<AppState>) {}\n\n  ngOnInit(): void {\n    this.signUpForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required]),\n    });\n  }\n\n  onSignUpSubmit() {\n    if (!this.signUpForm.valid) {\n      return;\n    }\n    const email = this.signUpForm.value.email;\n    const password = this.signUpForm.value.password;\n    this.store.dispatch(setLoadingSpinner({ status: true }));\n    this.store.dispatch(signupStart({ email, password }));\n  }\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-md-6 offset-md-3\">\n      <h3>SignUp</h3>\n      <hr />\n      <form [formGroup]=\"signUpForm\" (ngSubmit)=\"onSignUpSubmit()\">\n        <div class=\"mb-3\">\n          <label>Email</label>\n          <input type=\"email\" class=\"form-control\" formControlName=\"email\" />\n          <div\n            *ngIf=\"\n              signUpForm.get('email').touched && !signUpForm.get('email').valid\n            \"\n          >\n            <div *ngIf=\"signUpForm.get('email').errors.required\">\n              Email is required\n            </div>\n            <div *ngIf=\"signUpForm.get('email').errors.email\">\n              Invalid Email\n            </div>\n          </div>\n        </div>\n        <div class=\"mb-3\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            formControlName=\"password\"\n          />\n          <div\n            *ngIf=\"\n              signUpForm.get('password').touched &&\n              !signUpForm.get('password').valid\n            \"\n          >\n            <div>Password is required</div>\n          </div>\n        </div>\n        <div class=\"mb-3\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-primary\"\n            [disabled]=\"!signUpForm.valid\"\n          >\n            SignUp\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///"}